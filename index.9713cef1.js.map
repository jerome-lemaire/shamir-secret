{"mappings":"CACC,WAEG,IAAIA,EAAM,CAAC,EAmBX,SAASC,IAELD,EAAIE,UAAUC,UAAY,GAE1B,IAAIC,EAASJ,EAAII,OAAOC,MACpBC,EAAYC,QAAQC,QAAQJ,GAC5BK,EAAQC,WAAWV,EAAIS,MAAMJ,OAC7BM,EAAWD,WAAWV,EAAIW,SAASN,OAEvC,GAAII,EAAQ,EACRT,EAAIY,MAAMC,YAAc,gCAGvB,GAAIJ,EAAQ,IACbT,EAAIY,MAAMC,YAAc,iCAGvB,GAAIF,EAAW,EAChBX,EAAIY,MAAMC,YAAc,mCAGvB,GAAIF,EAAW,IAChBX,EAAIY,MAAMC,YAAc,oCAGvB,GAAIC,MAAML,GACXT,EAAIY,MAAMC,YAAc,+BAGvB,GAAIC,MAAMH,GACXX,EAAIY,MAAMC,YAAc,kCAGvB,GAAIF,EAAWF,EAChBT,EAAIY,MAAMC,YAAc,wCAGvB,GAAqB,GAAjBT,EAAOW,OAAX,CAKDf,EAAIY,MAAMC,YAAc,GAG5B,IACIG,EAAST,QAAQU,MAAMX,EAAWG,EAAOE,EADhC,MAETO,EAAQC,SAASC,cAAc,SACnCpB,EAAIE,UAAUmB,YAAYH,GAG1B,IAAK,IAAII,EAAE,EAAGA,EAAEN,EAAOD,OAAQO,IAAK,CAChC,IAAIL,EAAQD,EAAOM,GACfC,EAAKJ,SAASC,cAAc,MAChCG,EAAGC,UAAUC,IAAI,QACjBF,EAAGV,YAAcI,EACjBjB,EAAIE,UAAUmB,YAAYE,GAC1BvB,EAAIE,UAAUC,WAAa,8DAA8DuB,UAAUT,yCACvG,CAEAjB,EAAI2B,eAAed,YAAcJ,EACjCT,EAAI4B,aAAaf,YAAcF,CAnBH,MAJxBX,EAAIY,MAAMC,YAAc,iBAwBhC,CAEA,SAASgB,IAEL7B,EAAI8B,SAASjB,YAAc,GAE3B,IAEIkB,EAFW/B,EAAI+B,MAAM1B,MAEJ2B,OAAOC,MAAM,OAElC,IACI,IAAIC,EAAc3B,QAAQ4B,QAAQJ,GAC9BD,EAAWvB,QAAQ6B,QAAQF,EAInC,CAFA,MAAOG,GACHrC,EAAI8B,SAASjB,YAAcwB,EAAEC,OACjC,CAEAtC,EAAI8B,SAASjB,YAAciB,CAC/B,CAnGA9B,EAAIW,SAAW4B,EAAE,aACjBvC,EAAIS,MAAQ8B,EAAE,UACdvC,EAAII,OAASmC,EAAE,WACfvC,EAAI2B,eAAiBY,EAAE,mBACvBvC,EAAI4B,aAAeW,EAAE,iBACrBvC,EAAIY,MAAQ2B,EAAE,UACdvC,EAAIE,UAAYqC,EAAE,cAClBvC,EAAI+B,MAAQQ,EAAE,UACdvC,EAAI8B,SAAWS,EAAE,aAIbvC,EAAIW,SAAS6B,iBAAiB,QAASvC,GACvCD,EAAIS,MAAM+B,iBAAiB,QAASvC,GACpCD,EAAII,OAAOoC,iBAAiB,QAASvC,GACrCD,EAAI+B,MAAMS,iBAAiB,QAASX,EAwF5C,CA1GC","sources":["src/js/app.js"],"sourcesContent":["// Coordinates the interaction of elements on the page\n(function() {\n\n    var DOM = {};\n    DOM.required = $(\".required\");\n    DOM.total = $(\".total\");\n    DOM.secret = $(\".secret\");\n    DOM.distributesize = $(\".distributesize\");\n    DOM.recreatesize = $(\".recreatesize\");\n    DOM.error = $(\".error\");\n    DOM.generated = $(\".generated\");\n    DOM.parts = $(\".parts\");\n    DOM.combined = $(\".combined\");\n\n    function init() {\n        // Events\n        DOM.required.addEventListener(\"input\", generateParts);\n        DOM.total.addEventListener(\"input\", generateParts);\n        DOM.secret.addEventListener(\"input\", generateParts);\n        DOM.parts.addEventListener(\"input\", combineParts);\n    }\n\n    function generateParts() {\n        // Clear old generated\n        DOM.generated.innerHTML = \"\";\n        // Get the input values\n        var secret = DOM.secret.value;\n        var secretHex = secrets.str2hex(secret);\n        var total = parseFloat(DOM.total.value);\n        var required = parseFloat(DOM.required.value);\n        // validate the input\n        if (total < 2) {\n            DOM.error.textContent = \"Total must be at least 1\";\n            return;\n        }\n        else if (total > 255) {\n            DOM.error.textContent = \"Total must be at most 255\";\n            return;\n        }\n        else if (required < 2) {\n            DOM.error.textContent = \"Required must be at least 1\";\n            return;\n        }\n        else if (required > 255) {\n            DOM.error.textContent = \"Required must be at most 255\";\n            return;\n        }\n        else if (isNaN(total)) {\n            DOM.error.textContent = \"Invalid value for total\";\n            return;\n        }\n        else if (isNaN(required)) {\n            DOM.error.textContent = \"Invalid value for required\";\n            return;\n        }\n        else if (required > total) {\n            DOM.error.textContent = \"Required must be less than total\";\n            return;\n        }\n        else if (secret.length == 0) {\n            DOM.error.textContent = \"Secret is blank\";\n            return;\n        }\n        else {\n            DOM.error.textContent = \"\";\n        }\n        // Generate the parts to share\n        var minPad = 1024; // see https://github.com/amper5and/secrets.js#note-on-security\n        var shares = secrets.share(secretHex, total, required, minPad);\n        var table = document.createElement('table');\n        DOM.generated.appendChild(table);\n        \n        // Display the parts\n        for (var i=0; i<shares.length; i++) {\n            var share = shares[i];\n            var li = document.createElement(\"li\");\n            li.classList.add(\"part\");\n            li.textContent = share;\n            DOM.generated.appendChild(li);\n            DOM.generated.innerHTML += `<img src=\"https://api.qrserver.com/v1/create-qr-code/?data=${encodeURI(share)}&amp;size=200x200\" alt=\"\" title=\"\" />`;\n        }\n        // Update the plain-language info\n        DOM.distributesize.textContent = total;\n        DOM.recreatesize.textContent = required;\n    }\n\n    function combineParts() {\n        // Clear old text\n        DOM.combined.textContent = \"\";\n        // Get the parts entered by the user\n        var partsStr = DOM.parts.value;\n        // Validate and sanitize the input\n        var parts = partsStr.trim().split(/\\s+/);\n        // Combine the parts\n        try {\n            var combinedHex = secrets.combine(parts);\n            var combined = secrets.hex2str(combinedHex);\n        }\n        catch (e) {\n            DOM.combined.textContent = e.message;\n        }\n        // Display the combined parts\n        DOM.combined.textContent = combined;\n    }\n\n    init();\n\n})();\n"],"names":["DOM","generateParts","generated","innerHTML","secret","value","secretHex","secrets","str2hex","total","parseFloat","required","error","textContent","isNaN","length","shares","share","table","document","createElement","appendChild","i","li","classList","add","encodeURI","distributesize","recreatesize","combineParts","combined","parts","trim","split","combinedHex","combine","hex2str","e","message","$","addEventListener"],"version":3,"file":"index.9713cef1.js.map"}